1. 原理
用火鸡冒充鸭子
<interface> Duck : quack(), fly() -> GreenheadDuck
<interface> Turkey: gobble(), fly() -> WildTurkey
=>
<interface> Duck  <- TurkeyAdapter <<<- WildTurkey

适配器模式：将一个类的接口转换成另一种接口，让原本接口不兼容的类可以兼容
目标<-适配器<<<-被适配者

从用户的角度看不到被适配者，是解耦的
用户调用适配器转化出来的 目标接口
适配器再调用被适配者的相关接口方法

2. 对象适配器与类适配器

对象适配器 通过调用对象的方法来模拟目标接口的方法 [推荐]
目标<-适配器<<<-被适配者     TurkeyAdapter

类适配器 通过多重继承实现
目标 <- 适配器 -> 被适配者   TurkeyAdapter2

3. 从枚举器到迭代器的适配 EnumerationIterator
<interface> Iterator: hasNext(), next(), Remove()
<-
Enumeration Iterator: hasNext(), next(), Remove()
<<<-
<interface> Enumeration: hasMoreElement(), nextElement

4. 装饰者模式与适配器模式的差别
decorator: 装饰者和被装饰者都有相同的超类。 不改变接口，但加入责任
adapter: 每级都是不同类族。 一个接口转换为另一个接口











