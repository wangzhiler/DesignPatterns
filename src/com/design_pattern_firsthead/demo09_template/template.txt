1. 模板模式原理
    泡咖啡与泡茶的算法
        Coffee: prepareRecipe(){ boilWater(), brewCoffee(), pourInCup(), addSugarMilk() }
        Tea:    prepareRecipe(){ boilWater(), brewTea(),    pourInCup(), addLemon()     }

    抽象泡茶算法
        abstract HotDrink: prepareRecipe(), boilWater(), pourInCup()
        Tea:    prepareRecipe(), brewTea(),    addLemon()
        Coffee: prepareRecipe(), brewCoffee(), addSugarMilk()

    模板模式的原理与设计
        步骤也可以抽象出来
        abstract HotDrink: prepareRecipe(), boilWater(), brew(), pourInCup(), addCondiments()
        Coffee: brew(), addCondiments()
        Tea:    brew(), addConfiments()

        模板模式：封装了一个算法步骤，并允许子类为一个或多个步骤方法提供实现
        模板模式可以使子类在不改变算法结构的情况下, 重新定义算法中的某些步骤

        AbstractClass: templateMethod(), AbsOperation1(), AbsOperation2(), concreteOp1(), hook()

        结构：
            抽象类。一个方法内放了步骤。
            步骤为要实现的目的，每个步骤都是一个方法。
            有三种类型步骤，抽象的(由子类具体实现)，final的(超类中具体实现)，hook的(可选的)

2. 身边模板模式
    排序鸭子
        数组内置的sort模板
        Comparable接口
    自定义控件
    安卓里 BaseAdapter, Activity的生命周期
    框架

3. 好莱坞原则
    别调用我们，我们会调用你
    高层无需知道调用底层的细节，解耦

    IOC原理就是基于好莱坞原则，所有的组件都是被动的，初始化和调用都由容器负责




